class adder_agent extends uvm_agent;
  `uvm_component_utils(adder_agent)
  
  adder_driver drv;
  adder_monitor mon;
  uvm_sequencer #(adder_transaction) seqr;
  
  uvm_active_passive_enum is_active = UVM_ACTIVE; // default active
  
  function new(string name="adder_agent", uvm_component parent=null);
    super.new(name, parent);
  endfunction
  
  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    
    // Monitor is always present
    mon = adder_monitor::type_id::create("mon", this);
    
    if (is_active == UVM_ACTIVE) begin
      drv  = adder_driver::type_id::create("drv", this);
      seqr = uvm_sequencer#(adder_transaction)::type_id::create("seqr", this);
    end
  endfunction
  
  virtual function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    
    if (is_active == UVM_ACTIVE) begin
      drv.seq_item_port.connect(seqr.seq_item_export);
    end
  endfunction
  
endclass
