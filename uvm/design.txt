// Full Adder Module
module full_adder(input A, input B, input Cin, output S, output Cout);
  assign S    = A ^ B ^ Cin;                 // sum
  assign Cout = (A & B) | (Cin & (A ^ B));   // carry
endmodule
  
// 8-bit Ripple Carry Adder
module ripple_carry_adder_8bit(input [7:0] A, input [7:0] B, input Cin, 
                               output [7:0] S, output Cout);
  wire [7:0] carry;

  full_adder fa0(.A(A[0]), .B(B[0]), .Cin(Cin),      .S(S[0]), .Cout(carry[0]));
  full_adder fa1(.A(A[1]), .B(B[1]), .Cin(carry[0]), .S(S[1]), .Cout(carry[1]));
  full_adder fa2(.A(A[2]), .B(B[2]), .Cin(carry[1]), .S(S[2]), .Cout(carry[2]));
  full_adder fa3(.A(A[3]), .B(B[3]), .Cin(carry[2]), .S(S[3]), .Cout(carry[3]));
  full_adder fa4(.A(A[4]), .B(B[4]), .Cin(carry[3]), .S(S[4]), .Cout(carry[4]));
  full_adder fa5(.A(A[5]), .B(B[5]), .Cin(carry[4]), .S(S[5]), .Cout(carry[5]));
  full_adder fa6(.A(A[6]), .B(B[6]), .Cin(carry[5]), .S(S[6]), .Cout(carry[6]));
  full_adder fa7(.A(A[7]), .B(B[7]), .Cin(carry[6]), .S(S[7]), .Cout(carry[7]));

  assign Cout = carry[7];  // Final carry out
endmodule
